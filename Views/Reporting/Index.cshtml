@using MaterialGatePassTacker.Models
@using System.ComponentModel.DataAnnotations.Schema
@model PaginatedList<T_Gate_Pass>

@{
    ViewData["Title"] = "Gate Pass Reporting";
}

<h2 class="mb-3 text-2xl font-semibold text-gray-800 border-b-2 pb-2">
    @ViewData["Title"]
</h2>

<!-- Filter & Page Size Section -->
<div class="d-flex justify-content-between align-items-center mb-3">
    <!-- Page Size Dropdown -->
    <div class="d-flex align-items-center">
        <label for="pageSize" class="me-2">Page Size:</label>
        <select id="pageSize" class="form-control form-control-sm w-auto d-inline-block" onchange="changePageSize(this.value)">
            <option value="5" selected="@(ViewBag.PageSize == 5 ? "selected" : null)">5</option>
            <option value="10" selected="@(ViewBag.PageSize == 10 ? "selected" : null)">10</option>
            <option value="25" selected="@(ViewBag.PageSize == 25 ? "selected" : null)">25</option>
        </select>
    </div>

    <!-- Filter Options Button -->
    <div class="dropdown">
        <button class="btn btn-outline-primary btn-sm dropdown-toggle" type="button" id="filterDropdown" data-bs-toggle="dropdown" aria-expanded="false">
            Filter Options
        </button>
        <ul class="dropdown-menu p-3 shadow dropdown-menu-end" style="min-width: 300px;">
            <li>
                <label for="sou">SOU</label>
                <select id="sou" class="form-select form-select-sm">
                    <option value="">Select SOU</option>
                    @foreach (var sou in ViewBag.SOUs)
                    {
                        <option value="@sou.SOUID">@sou.Sou_code</option>
                    }
                </select>
            </li>

            <li class="mt-2">
                <label for="project">Project</label>
                <select id="project" class="form-select form-select-sm" disabled>
                    <option value="">Select Project</option>
                </select>
            </li>

            <li class="mt-2">
                <label for="gate">Gate</label>
                <select id="gate" class="form-select form-select-sm" disabled>
                    <option value="">Select Gate</option>
                </select>
            </li>

            <li class="mt-2">
                <label for="date-range" class="form-label">Date Range</label>
                <div class="input-group">
                    <input type="text" id="from-date" class="form-control datepicker" placeholder="From">
                    <span class="input-group-text">-</span>
                    <input type="text" id="to-date" class="form-control datepicker" placeholder="To">
                </div>
            </li>

            <li class="mt-3 d-flex justify-content-end">
                <button class="btn btn-primary btn-sm me-2" id="apply-filter">Apply</button>
                <button class="btn btn-secondary btn-sm" id="clear-filter">Clear</button>
            </li>
        </ul>
    </div>
</div>


<!-- Table Section -->
<div class="table-responsive" style="max-height: 500px; overflow-y: auto;">
    <table class="table table-striped table-hover table-bordered text-center">
        <thead class="table-dark">
            <tr>
                @foreach (var prop in typeof(T_Gate_Pass).GetProperties())
                {
                    if (!prop.GetCustomAttributes(typeof(NotMappedAttribute), true).Any() &&
                    prop.Name != "GPID" && prop.Name != "PID" && prop.Name != "GID" && prop.Name != "SID")
                    {
                        string columnName = System.Text.RegularExpressions.Regex.Replace(prop.Name, "[^a-zA-Z0-9]", " ");
                        <th>@columnName</th>
                    }
                }
            </tr>
        </thead>
        <tbody id="table-body">
            @await Html.PartialAsync("_GatePassTable", Model)
        </tbody>
    </table>
</div>
<!-- Pagination Section-->
<nav aria-label="Page navigation">
    <ul class="custom-pagination">
        <li class="custom-page-item @(Model.HasPreviousPage ? "" : "custom-disabled")">
            <a class="custom-page-link" href="#" onclick="loadPaginatedData(@(Model.PageIndex - 1), @ViewBag.PageSize)">Previous</a>
        </li>
        @for (int i = 1; i <= Model.TotalPages; i++)
        {
            <li class="custom-page-item @(i == Model.PageIndex ? "custom-active" : "")">
                <a class="custom-page-link" href="#" onclick="loadPaginatedData(@i, @ViewBag.PageSize)">@i</a>
            </li>
        }
        <li class="custom-page-item @(Model.HasNextPage ? "" : "custom-disabled")">
            <a class="custom-page-link" href="#" onclick="loadPaginatedData(@(Model.PageIndex + 1), @ViewBag.PageSize)">Next</a>
        </li>
    </ul>
</nav>

<a href="javascript:void(0);" onclick="showImageModal('image1.jpg')">View Image</a>
<!-- Ensure jQuery & Bootstrap JS are properly loaded -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
<!-- Ensure jQuery and Bootstrap are loaded -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
    $(document).ready(function () {
        console.log("jQuery Loaded");

        // Test if the dropdown is being clicked
        $(".dropdown-toggle").click(function () {
            console.log("Dropdown clicked");
        });

        // Initialize Bootstrap dropdown manually
        document.addEventListener("DOMContentLoaded", function () {
            var dropdownElementList = [].slice.call(document.querySelectorAll('.dropdown-toggle'));
            var dropdownList = dropdownElementList.map(function (dropdownToggleEl) {
                return new bootstrap.Dropdown(dropdownToggleEl);
            });
        });

        // Initialize datepickers
        $('.datepicker').datepicker({
            format: 'yyyy-mm-dd',
            autoclose: true
        });

        // SOU change event
        $('#sou').change(function () {
            let souId = $(this).val();
            if (souId) {
                $.get('/Reporting/GetProjects/' + souId, function (data) {
                    let projectSelect = $('#project');
                    projectSelect.empty().append('<option value="">Select Project</option>');
                    $.each(data, function (index, project) {
                        projectSelect.append('<option value="' + project.pid + '">' + project.project_Name + '</option>');
                    });
                    projectSelect.prop('disabled', false);
                });
            } else {
                $('#project').prop('disabled', true).val('');
            }
        });

        // Project change event
        $('#project').change(function () {
            let projectId = $(this).val();
            if (projectId) {
                $.get('/Reporting/GetGates/' + projectId, function (data) {
                    let gateSelect = $('#gate');
                    gateSelect.empty().append('<option value="">Select Gate</option>');
                    $.each(data, function (index, gate) {
                        gateSelect.append('<option value="' + gate.gid + '">' + gate.gate_No + '</option>');
                    });
                    gateSelect.prop('disabled', false);
                });
            } else {
                $('#gate').prop('disabled', true).val('');
            }
        });

        // Apply filter
        $('#apply-filter').click(function () {
            loadData(1);
        });

        // Clear filter
        $('#clear-filter').click(function () {
            $('#sou, #project, #gate').val('');
            $('#project, #gate').prop('disabled', true);
            $('#from-date, #to-date').val('');
            loadData(1);
        });
    });

        
function loadData(page, pageSize) {
        let filters = {
            souId: $('#sou').val(),
            projectId: $('#project').val(),
            gateId: $('#gate').val(),
            fromDate: $('#from-date').val(),
            toDate: $('#to-date').val(),
            pageSize: pageSize || $('#pageSize').val(),
            pageNumber: page
        };

        $.get('/Reporting/FilterData', filters, function (data) {
            $('#table-body').html(data.tableHtml);
            updatePagination(data.pageIndex, data.totalPages, pageSize);
        });
    }

           function updatePagination(currentPage, totalPages, pageSize) {
        let paginationHtml = `
            <li class="custom-page-item ${currentPage > 1 ? '' : 'custom-disabled'}">
                <a class="custom-page-link" href="#" onclick="loadData(${currentPage - 1}, ${pageSize})">Previous</a>
            </li>`;

        for (let i = 1; i <= totalPages; i++) {
            paginationHtml += `
                <li class="custom-page-item ${i === currentPage ? 'custom-active' : ''}">
                    <a class="custom-page-link" href="#" onclick="loadData(${i}, ${pageSize})">${i}</a>
                </li>`;
        }

        paginationHtml += `
            <li class="custom-page-item ${currentPage < totalPages ? '' : 'custom-disabled'}">
                <a class="custom-page-link" href="#" onclick="loadData(${currentPage + 1}, ${pageSize})">Next</a>
            </li>`;

        document.querySelector('.custom-pagination').innerHTML = paginationHtml;
    }


        function loadPaginatedData(page, pageSize) {
        $.get('/Reporting/Page/' + page + '?pageSize=' + pageSize, function (data) {
            $('#table-body').html($(data).find('#table-body').html());
            $('.pagination').html($(data).find('.pagination').html());
        });
    }

    // Handle page size change
    function changePageSize(newPageSize) {
        loadData(1, newPageSize); // Reset to page 1 when changing page size
    }

        window.showImageModal = function(filePath) {

        const imageUrl = `/Reporting/GetImage?filePath=${encodeURIComponent(filePath)}`;

        $.get(imageUrl, function (images) {
            if (images.length === 0) {
                alert("No images found.");
                return;
            }

            let carouselIndicators = images.map((_, index) =>
                `<button type="button" data-bs-target="#imageCarousel" data-bs-slide-to="${index}" class="${index === 0 ? 'active' : ''}" aria-current="true"></button>`
            ).join("");

            let carouselItems = images.map((img, index) =>
                `<div class="carousel-item ${index === 0 ? 'active' : ''}">
                    <img src="${img}" class="d-block w-100" alt="Image ${index + 1}">
                </div>`
            ).join("");

            const modalHtml = `
                <div class="modal fade" id="imageModal" tabindex="-1" aria-hidden="true">
                    <div class="modal-dialog modal-lg">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title">Image Preview</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                <div id="imageCarousel" class="carousel slide" data-bs-ride="carousel">
                                    <div class="carousel-indicators">${carouselIndicators}</div>
                                    <div class="carousel-inner">${carouselItems}</div>
                                    <button class="carousel-control-prev" type="button" data-bs-target="#imageCarousel" data-bs-slide="prev">
                                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                                    </button>
                                    <button class="carousel-control-next" type="button" data-bs-target="#imageCarousel" data-bs-slide="next">
                                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;

            $('body').append(modalHtml);
            $('#imageModal').modal('show');
            $('#imageModal').on('hidden.bs.modal', function () {
                $(this).remove();
            });
        }).fail(function (error) {
            alert(error.responseText);
        });
    };






</script>

<style>
    table {
        width: 100%;
        white-space: nowrap;
    }

    th, td {
        padding: 10px;
        text-align: center;
    }

    th {
        background-color: #343a40;
        color: white;
    }

    .btn-sm {
        font-size: 0.875rem;
        padding: 0.375rem 0.75rem;
    }

    nav .custom-pagination .custom-page-item .custom-page-link {
        text-decoration: none;
        padding: 10px 16px;
        border: 1px solid #ccc;
        color: #007bff;
        cursor: pointer;
        background-color: #fff;
        border-radius: 5px;
        transition: background-color 0.3s ease;
    }

        nav .custom-pagination .custom-page-item .custom-page-link:hover {
            background-color: #f0f0f0;
        }

    .custom-pagination {
        display: flex;
        list-style: none;
        padding: 0;
        justify-content: center;
    }

    .custom-page-item {
        margin: 0 5px;
    }

    .custom-active .custom-page-link {
        background-color: #007bff;
        color: #fff;
    }

    .custom-disabled .custom-page-link {
        background-color: #e9ecef;
        color: #6c757d;
        cursor: not-allowed;
        pointer-events: none;
    }
</style>
